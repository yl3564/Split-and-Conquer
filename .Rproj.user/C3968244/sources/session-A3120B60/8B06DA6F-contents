library(MASS)
library(glmnet)
library(doParallel)

#  setting n and p
n<-200
p<-400


# generate x
mu<-matrix(rep(0,p),nrow=p)
sigma<-diag(1,nrow=p)
iid<-mvrnorm(n,mu,sigma)

# generate beta
# p: nrow of beta
# k: number of non_zero components in beta
beta_fun<-function(p,k,min,max){
  index<-sample(c(1:p),k)
  beta<-matrix(rep(0,p),nrow=p)
  beta[index]<-round(runif(k,min,max),2)
  return(beta)
}


# generate y
beta<-beta_fun(p,k=30,min=.2,max=.8)

y_generate<-function(beta,X){
  prob<-1/(1+exp(-X%*%beta))
  n<-dim(X)[1]
  y<-rbinom(n=n,size=1,prob=prob)
  return(y)
}

y<-y_generate(beta,iid,n)


# real non-zero beta
beta[index]

# glmnet-lasso K=1
t1<-proc.time()
cvfit<-cv.glmnet(iid,y,alpha=1,family="binomial",type.measure="class")
pred.cvfit<-predict(cvfit, newx=iid, type="class", s="lambda.1se")
MR1<-sum(abs(y-as.numeric(pred.cvfit)))/length(y) # Missclasification Rate
t2<-proc.time()
t2-t1

coef(cvfit,s=cvfit$lambda.1se)

# split-and-conquer function
SC_fun<-function(k,X,y,w){
  n<-dim(X)[1]
  p<-dim(X)[2]
  index<-sample(1:n,size=n,replace=F)
  X<-X[index,]
  y<-y[index]
  ncores = 10
  cl <- makeCluster(ncores)
  registerDoParallel(cl)
  beta_dat = foreach(i=1:k,.packages = "glmnet") %dopar%{
    X_k<-X[(n/k*(i-1)+1):(n/k*i),]
    y_k<-y[(n/k*(i-1)+1):(n/k*i)]
    cvfit.update<-cv.glmnet(X_k,y_k,alpha=1,family="binomial",type.measure="class")
    sub_beta<-coef(cvfit.update,s=cvfit.update$lambda.1se)
    sub_beta
  }
  beta_data<-data.frame(sapply(beta_dat,as.numeric))

  E_index<-apply(beta_data!=0,MARGIN=1,FUN=sum)[-1]
  E<-matrix(rep(0,p*p),nrow=p)
  E_index<-which(E_index>=w)
  E[cbind(E_index,E_index)]<-1
  A<-E[,E_index]

  Sigma = foreach(i=1:k) %dopar%{
    theta<-X[(n/k*(i-1)+1):(n/k*i),]%*%beta_data[-1,i]
    s<-exp(theta)/(1+exp(theta))^2
    s
  }

  m1<-matrix(0,nrow=dim(A)[2],ncol=dim(A)[2])
  m2<-matrix(0,nrow=dim(A)[2],ncol=1)
  for (i in 1:k) {
    s<-diag(c(Sigma[[i]]))
    x<-X[(n/k*(i-1)+1):(n/k*i),]
    M1<-t(A)%*%t(x)%*%s%*%x%*%A
    m1<-m1+M1
    beta_x<-beta_data[-1,i][E_index]
    M2<-M1%*%beta_x
    m2<-m2+M2
  }
  beta_c<-A%*%solve(m1)%*%m2
  stopCluster(cl)
  return(beta_c)
}

# Run SC_fun
t3<-proc.time()
beta_c<-SC_fun(k=2,X=iid,y=y,w=2)
pred_y<-1/(1+exp(-iid%*%beta_c))
pred_y[which(pred_y>0.5)]<-1
pred_y[which(pred_y<0.5)]<-0
MR2<-(length(y)-sum(pred_y==y))/length(y)

t4<-proc.time()


# Time Comparison
t2-t1
t4-t3

# Missclassification Rate Comparison
MR1
MR2
